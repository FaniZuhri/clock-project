
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003e38  08003e38  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000005c  08003f70  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08003f70  000053ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a817  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  0000f8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  000118c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000692  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aef  00000000  00000000  00012812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbec  00000000  00000000  00029301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b03b  00000000  00000000  00035eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0f28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000c0f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c35dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e20 	.word	0x08003e20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003e20 	.word	0x08003e20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_DMA_Init+0x3c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a0b      	ldr	r2, [pc, #44]	@ (80005bc <MX_DMA_Init+0x3c>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_DMA_Init+0x3c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2046      	movs	r0, #70	@ 0x46
 80005a8:	f000 fe73 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005ac:	2046      	movs	r0, #70	@ 0x46
 80005ae:	f000 fe8c 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b4d      	ldr	r3, [pc, #308]	@ (8000710 <MX_GPIO_Init+0x150>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a4c      	ldr	r2, [pc, #304]	@ (8000710 <MX_GPIO_Init+0x150>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000710 <MX_GPIO_Init+0x150>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b46      	ldr	r3, [pc, #280]	@ (8000710 <MX_GPIO_Init+0x150>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a45      	ldr	r2, [pc, #276]	@ (8000710 <MX_GPIO_Init+0x150>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b43      	ldr	r3, [pc, #268]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b3f      	ldr	r3, [pc, #252]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a3e      	ldr	r2, [pc, #248]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b3c      	ldr	r3, [pc, #240]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <MX_GPIO_Init+0x150>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <MX_GPIO_Init+0x150>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064c:	2303      	movs	r3, #3
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	482e      	ldr	r0, [pc, #184]	@ (8000714 <MX_GPIO_Init+0x154>)
 800065c:	f001 f93a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000660:	2303      	movs	r3, #3
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000664:	2303      	movs	r3, #3
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4829      	ldr	r0, [pc, #164]	@ (8000718 <MX_GPIO_Init+0x158>)
 8000674:	f001 f92e 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000678:	f649 13e1 	movw	r3, #39393	@ 0x99e1
 800067c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4823      	ldr	r0, [pc, #140]	@ (800071c <MX_GPIO_Init+0x15c>)
 800068e:	f001 f921 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000692:	231e      	movs	r3, #30
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000696:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	481d      	ldr	r0, [pc, #116]	@ (800071c <MX_GPIO_Init+0x15c>)
 80006a8:	f001 f914 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006ac:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80006b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4817      	ldr	r0, [pc, #92]	@ (8000720 <MX_GPIO_Init+0x160>)
 80006c2:	f001 f907 	bl	80018d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2007      	movs	r0, #7
 80006cc:	f000 fde1 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006d0:	2007      	movs	r0, #7
 80006d2:	f000 fdfa 	bl	80012ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2008      	movs	r0, #8
 80006dc:	f000 fdd9 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f000 fdf2 	bl	80012ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2009      	movs	r0, #9
 80006ec:	f000 fdd1 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006f0:	2009      	movs	r0, #9
 80006f2:	f000 fdea 	bl	80012ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200a      	movs	r0, #10
 80006fc:	f000 fdc9 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000700:	200a      	movs	r0, #10
 8000702:	f000 fde2 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020800 	.word	0x40020800
 8000718:	40021c00 	.word	0x40021c00
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400

08000724 <clear_process_flag>:

__STATIC_INLINE void set_process_flag(flag_t flag){
	process_flag = flag;
}

__STATIC_INLINE void clear_process_flag(void){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	process_flag = FLAG_STANDBY;
 8000728:	4b03      	ldr	r3, [pc, #12]	@ (8000738 <clear_process_flag+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000079 	.word	0x20000079

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fc35 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f949 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f7ff ff39 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800074e:	f7ff ff17 	bl	8000580 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000752:	f000 fb5f 	bl	8000e14 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000756:	f000 f9f5 	bl	8000b44 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (process_flag == FLAG_SHOW_CLOCK){
 800075a:	4b94      	ldr	r3, [pc, #592]	@ (80009ac <main+0x270>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b01      	cmp	r3, #1
 8000762:	d129      	bne.n	80007b8 <main+0x7c>
		  memset(uart_tx_buf, 0x0U, TX_SIZE);
 8000764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000768:	2100      	movs	r1, #0
 800076a:	4891      	ldr	r0, [pc, #580]	@ (80009b0 <main+0x274>)
 800076c:	f002 fed8 	bl	8003520 <memset>

		  HAL_RTC_WaitForSynchro(&hrtc);
 8000770:	4890      	ldr	r0, [pc, #576]	@ (80009b4 <main+0x278>)
 8000772:	f002 f9eb 	bl	8002b4c <HAL_RTC_WaitForSynchro>

		  if(HAL_RTC_GetDate(&hrtc, &date_time, RTC_FORMAT_BIN) != HAL_OK){
 8000776:	2200      	movs	r2, #0
 8000778:	498f      	ldr	r1, [pc, #572]	@ (80009b8 <main+0x27c>)
 800077a:	488e      	ldr	r0, [pc, #568]	@ (80009b4 <main+0x278>)
 800077c:	f002 f997 	bl	8002aae <HAL_RTC_GetDate>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <main+0x4e>
			  Error_Handler();
 8000786:	f000 f9d7 	bl	8000b38 <Error_Handler>
		  }
		  if(HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK){
 800078a:	2200      	movs	r2, #0
 800078c:	498b      	ldr	r1, [pc, #556]	@ (80009bc <main+0x280>)
 800078e:	4889      	ldr	r0, [pc, #548]	@ (80009b4 <main+0x278>)
 8000790:	f002 f8ab 	bl	80028ea <HAL_RTC_GetTime>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <main+0x62>
			  Error_Handler();
 800079a:	f000 f9cd 	bl	8000b38 <Error_Handler>
		  }

		  HAL_RTC_WaitForSynchro(&hrtc);
 800079e:	4885      	ldr	r0, [pc, #532]	@ (80009b4 <main+0x278>)
 80007a0:	f002 f9d4 	bl	8002b4c <HAL_RTC_WaitForSynchro>

		  display_rtc_to_serial(rtc_time, RTC_TYPE_DECIMAL);
 80007a4:	4b85      	ldr	r3, [pc, #532]	@ (80009bc <main+0x280>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	9200      	str	r2, [sp, #0]
 80007ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b0:	f000 f976 	bl	8000aa0 <display_rtc_to_serial>

		  clear_process_flag();
 80007b4:	f7ff ffb6 	bl	8000724 <clear_process_flag>
	  }

	  if (process_flag == FLAG_SET_CLOCK){
 80007b8:	4b7c      	ldr	r3, [pc, #496]	@ (80009ac <main+0x270>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d158      	bne.n	8000874 <main+0x138>
		  memset(uart_tx_buf, 0x0U, TX_SIZE);
 80007c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007c6:	2100      	movs	r1, #0
 80007c8:	4879      	ldr	r0, [pc, #484]	@ (80009b0 <main+0x274>)
 80007ca:	f002 fea9 	bl	8003520 <memset>

		  rtc_set_flag += 1;
 80007ce:	4b7c      	ldr	r3, [pc, #496]	@ (80009c0 <main+0x284>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b79      	ldr	r3, [pc, #484]	@ (80009c0 <main+0x284>)
 80007da:	701a      	strb	r2, [r3, #0]

		  if (rtc_set_flag == RTC_SET_FLAG_MAX){
 80007dc:	4b78      	ldr	r3, [pc, #480]	@ (80009c0 <main+0x284>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d102      	bne.n	80007ec <main+0xb0>
			  rtc_set_flag = RTC_SET;
 80007e6:	4b76      	ldr	r3, [pc, #472]	@ (80009c0 <main+0x284>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		  }

		  if (rtc_set_flag == RTC_SET_HOUR){
 80007ec:	4b74      	ldr	r3, [pc, #464]	@ (80009c0 <main+0x284>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d104      	bne.n	8000800 <main+0xc4>
			  sprintf((char *) uart_tx_buf, "==== SET HOUR ====\r\n");
 80007f6:	4973      	ldr	r1, [pc, #460]	@ (80009c4 <main+0x288>)
 80007f8:	486d      	ldr	r0, [pc, #436]	@ (80009b0 <main+0x274>)
 80007fa:	f002 fe71 	bl	80034e0 <siprintf>
 80007fe:	e02c      	b.n	800085a <main+0x11e>
		  }
		  else if (rtc_set_flag == RTC_SET_MIN){
 8000800:	4b6f      	ldr	r3, [pc, #444]	@ (80009c0 <main+0x284>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b02      	cmp	r3, #2
 8000808:	d104      	bne.n	8000814 <main+0xd8>
			  sprintf((char *) uart_tx_buf, "==== SET MINUTES ====\r\n");
 800080a:	496f      	ldr	r1, [pc, #444]	@ (80009c8 <main+0x28c>)
 800080c:	4868      	ldr	r0, [pc, #416]	@ (80009b0 <main+0x274>)
 800080e:	f002 fe67 	bl	80034e0 <siprintf>
 8000812:	e022      	b.n	800085a <main+0x11e>
		  }
		  else if (rtc_set_flag == RTC_SET){
 8000814:	4b6a      	ldr	r3, [pc, #424]	@ (80009c0 <main+0x284>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d11d      	bne.n	800085a <main+0x11e>
			  sprintf((char *) uart_tx_buf, "==== SETTING TIME ====\r\n");
 800081e:	496b      	ldr	r1, [pc, #428]	@ (80009cc <main+0x290>)
 8000820:	4863      	ldr	r0, [pc, #396]	@ (80009b0 <main+0x274>)
 8000822:	f002 fe5d 	bl	80034e0 <siprintf>

			  HAL_RTC_WaitForSynchro(&hrtc);
 8000826:	4863      	ldr	r0, [pc, #396]	@ (80009b4 <main+0x278>)
 8000828:	f002 f990 	bl	8002b4c <HAL_RTC_WaitForSynchro>

			  if(HAL_RTC_SetDate(&hrtc, &date_time, RTC_FORMAT_BIN) != HAL_OK){
 800082c:	2200      	movs	r2, #0
 800082e:	4962      	ldr	r1, [pc, #392]	@ (80009b8 <main+0x27c>)
 8000830:	4860      	ldr	r0, [pc, #384]	@ (80009b4 <main+0x278>)
 8000832:	f002 f8b8 	bl	80029a6 <HAL_RTC_SetDate>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <main+0x104>
				  Error_Handler();
 800083c:	f000 f97c 	bl	8000b38 <Error_Handler>
			  }
			  if(HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK){
 8000840:	2200      	movs	r2, #0
 8000842:	495e      	ldr	r1, [pc, #376]	@ (80009bc <main+0x280>)
 8000844:	485b      	ldr	r0, [pc, #364]	@ (80009b4 <main+0x278>)
 8000846:	f001 ffb6 	bl	80027b6 <HAL_RTC_SetTime>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <main+0x118>
				  Error_Handler();
 8000850:	f000 f972 	bl	8000b38 <Error_Handler>
			  }

			  HAL_RTC_WaitForSynchro(&hrtc);
 8000854:	4857      	ldr	r0, [pc, #348]	@ (80009b4 <main+0x278>)
 8000856:	f002 f979 	bl	8002b4c <HAL_RTC_WaitForSynchro>
		  }

		  HAL_UART_Transmit(&huart1, uart_tx_buf, strlen((char *) uart_tx_buf), HAL_MAX_DELAY);
 800085a:	4855      	ldr	r0, [pc, #340]	@ (80009b0 <main+0x274>)
 800085c:	f7ff fcc0 	bl	80001e0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	4951      	ldr	r1, [pc, #324]	@ (80009b0 <main+0x274>)
 800086a:	4859      	ldr	r0, [pc, #356]	@ (80009d0 <main+0x294>)
 800086c:	f002 fa7c 	bl	8002d68 <HAL_UART_Transmit>
		  clear_process_flag();
 8000870:	f7ff ff58 	bl	8000724 <clear_process_flag>

	  }

	  if (process_flag == FLAG_INC_TIME){
 8000874:	4b4d      	ldr	r3, [pc, #308]	@ (80009ac <main+0x270>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b03      	cmp	r3, #3
 800087c:	d14a      	bne.n	8000914 <main+0x1d8>
		  memset(uart_tx_buf, 0x0U, TX_SIZE);
 800087e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000882:	2100      	movs	r1, #0
 8000884:	484a      	ldr	r0, [pc, #296]	@ (80009b0 <main+0x274>)
 8000886:	f002 fe4b 	bl	8003520 <memset>

		  if (rtc_set_flag == RTC_SET_HOUR){
 800088a:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <main+0x284>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b01      	cmp	r3, #1
 8000892:	d116      	bne.n	80008c2 <main+0x186>
			  rtc_time.Hours += 1;
 8000894:	4b49      	ldr	r3, [pc, #292]	@ (80009bc <main+0x280>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b47      	ldr	r3, [pc, #284]	@ (80009bc <main+0x280>)
 800089e:	701a      	strb	r2, [r3, #0]
			  if (rtc_time.Hours >= 24) rtc_time.Hours = 0;
 80008a0:	4b46      	ldr	r3, [pc, #280]	@ (80009bc <main+0x280>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b17      	cmp	r3, #23
 80008a6:	d902      	bls.n	80008ae <main+0x172>
 80008a8:	4b44      	ldr	r3, [pc, #272]	@ (80009bc <main+0x280>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fbf0 	bl	8001094 <HAL_Delay>
			  sprintf((char *)uart_tx_buf, "Hour: %d\r\n", rtc_time.Hours);
 80008b4:	4b41      	ldr	r3, [pc, #260]	@ (80009bc <main+0x280>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4946      	ldr	r1, [pc, #280]	@ (80009d4 <main+0x298>)
 80008bc:	483c      	ldr	r0, [pc, #240]	@ (80009b0 <main+0x274>)
 80008be:	f002 fe0f 	bl	80034e0 <siprintf>
		  }

		  if (rtc_set_flag == RTC_SET_MIN){
 80008c2:	4b3f      	ldr	r3, [pc, #252]	@ (80009c0 <main+0x284>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d116      	bne.n	80008fa <main+0x1be>
			  rtc_time.Minutes += 1;
 80008cc:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <main+0x280>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b39      	ldr	r3, [pc, #228]	@ (80009bc <main+0x280>)
 80008d6:	705a      	strb	r2, [r3, #1]
			  if (rtc_time.Minutes >= 60) rtc_time.Minutes = 0;
 80008d8:	4b38      	ldr	r3, [pc, #224]	@ (80009bc <main+0x280>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80008de:	d902      	bls.n	80008e6 <main+0x1aa>
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <main+0x280>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	705a      	strb	r2, [r3, #1]
			  HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f000 fbd4 	bl	8001094 <HAL_Delay>
			  sprintf((char *)uart_tx_buf, "Minutes: %d\r\n", rtc_time.Minutes);
 80008ec:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <main+0x280>)
 80008ee:	785b      	ldrb	r3, [r3, #1]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4939      	ldr	r1, [pc, #228]	@ (80009d8 <main+0x29c>)
 80008f4:	482e      	ldr	r0, [pc, #184]	@ (80009b0 <main+0x274>)
 80008f6:	f002 fdf3 	bl	80034e0 <siprintf>
		  }


		  HAL_UART_Transmit(&huart1, uart_tx_buf, strlen((char *) uart_tx_buf), HAL_MAX_DELAY);
 80008fa:	482d      	ldr	r0, [pc, #180]	@ (80009b0 <main+0x274>)
 80008fc:	f7ff fc70 	bl	80001e0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	4929      	ldr	r1, [pc, #164]	@ (80009b0 <main+0x274>)
 800090a:	4831      	ldr	r0, [pc, #196]	@ (80009d0 <main+0x294>)
 800090c:	f002 fa2c 	bl	8002d68 <HAL_UART_Transmit>
		  clear_process_flag();
 8000910:	f7ff ff08 	bl	8000724 <clear_process_flag>

	  }

	  if (process_flag == FLAG_DEC_TIME){
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <main+0x270>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b04      	cmp	r3, #4
 800091c:	f47f af1d 	bne.w	800075a <main+0x1e>
		  if (rtc_set_flag == RTC_SET_HOUR){
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <main+0x284>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b01      	cmp	r3, #1
 8000928:	d116      	bne.n	8000958 <main+0x21c>
			  rtc_time.Hours -= 1;
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <main+0x280>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <main+0x280>)
 8000934:	701a      	strb	r2, [r3, #0]
			  if (rtc_time.Hours >= 24) rtc_time.Hours = 23;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <main+0x280>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b17      	cmp	r3, #23
 800093c:	d902      	bls.n	8000944 <main+0x208>
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <main+0x280>)
 8000940:	2217      	movs	r2, #23
 8000942:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(10);
 8000944:	200a      	movs	r0, #10
 8000946:	f000 fba5 	bl	8001094 <HAL_Delay>
			  sprintf((char *)uart_tx_buf, "Hour: %d\r\n", rtc_time.Hours);
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <main+0x280>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4920      	ldr	r1, [pc, #128]	@ (80009d4 <main+0x298>)
 8000952:	4817      	ldr	r0, [pc, #92]	@ (80009b0 <main+0x274>)
 8000954:	f002 fdc4 	bl	80034e0 <siprintf>
		  }

		  if (rtc_set_flag == RTC_SET_MIN){
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <main+0x284>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b02      	cmp	r3, #2
 8000960:	d116      	bne.n	8000990 <main+0x254>
			  rtc_time.Minutes -= 1;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <main+0x280>)
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	3b01      	subs	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <main+0x280>)
 800096c:	705a      	strb	r2, [r3, #1]
			  if (rtc_time.Minutes >= 60) rtc_time.Minutes = 59;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <main+0x280>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	2b3b      	cmp	r3, #59	@ 0x3b
 8000974:	d902      	bls.n	800097c <main+0x240>
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <main+0x280>)
 8000978:	223b      	movs	r2, #59	@ 0x3b
 800097a:	705a      	strb	r2, [r3, #1]
			  HAL_Delay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f000 fb89 	bl	8001094 <HAL_Delay>
			  sprintf((char *)uart_tx_buf, "Minutes: %d\r\n", rtc_time.Minutes);
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <main+0x280>)
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	461a      	mov	r2, r3
 8000988:	4913      	ldr	r1, [pc, #76]	@ (80009d8 <main+0x29c>)
 800098a:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <main+0x274>)
 800098c:	f002 fda8 	bl	80034e0 <siprintf>
		  }

		  HAL_UART_Transmit(&huart1, uart_tx_buf, strlen((char *) uart_tx_buf), HAL_MAX_DELAY);
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <main+0x274>)
 8000992:	f7ff fc25 	bl	80001e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	4904      	ldr	r1, [pc, #16]	@ (80009b0 <main+0x274>)
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <main+0x294>)
 80009a2:	f002 f9e1 	bl	8002d68 <HAL_UART_Transmit>
		  clear_process_flag();
 80009a6:	f7ff febd 	bl	8000724 <clear_process_flag>
	  if (process_flag == FLAG_SHOW_CLOCK){
 80009aa:	e6d6      	b.n	800075a <main+0x1e>
 80009ac:	20000079 	.word	0x20000079
 80009b0:	2000007c 	.word	0x2000007c
 80009b4:	20000194 	.word	0x20000194
 80009b8:	20000190 	.word	0x20000190
 80009bc:	2000017c 	.word	0x2000017c
 80009c0:	20000078 	.word	0x20000078
 80009c4:	08003e38 	.word	0x08003e38
 80009c8:	08003e50 	.word	0x08003e50
 80009cc:	08003e68 	.word	0x08003e68
 80009d0:	200001b8 	.word	0x200001b8
 80009d4:	08003e84 	.word	0x08003e84
 80009d8:	08003e90 	.word	0x08003e90

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	@ 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	@ 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fd98 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <SystemClock_Config+0xbc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <SystemClock_Config+0xbc>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <SystemClock_Config+0xbc>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <SystemClock_Config+0xc0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <SystemClock_Config+0xc0>)
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <SystemClock_Config+0xc0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f8e5 	bl	8001c24 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a60:	f000 f86a 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fb48 	bl	8002114 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a8a:	f000 f855 	bl	8000b38 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	@ 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <display_rtc_to_serial>:

/* USER CODE BEGIN 4 */
void display_rtc_to_serial(RTC_TimeTypeDef time, rtc_num_t type){
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	b5b0      	push	{r4, r5, r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	f107 0410 	add.w	r4, r7, #16
 8000aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (type == RTC_TYPE_BCD){
 8000ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d118      	bne.n	8000aea <display_rtc_to_serial+0x4a>
		sprintf((char *)uart_tx_buf,
			  "Time: %d:%d:%d\n",
			  RTC_Bcd2ToByte(time.Hours),
 8000ab8:	7c3b      	ldrb	r3, [r7, #16]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 f8e6 	bl	8002c8c <RTC_Bcd2ToByte>
 8000ac0:	4603      	mov	r3, r0
		sprintf((char *)uart_tx_buf,
 8000ac2:	461c      	mov	r4, r3
			  RTC_Bcd2ToByte(time.Minutes),
 8000ac4:	7c7b      	ldrb	r3, [r7, #17]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f8e0 	bl	8002c8c <RTC_Bcd2ToByte>
 8000acc:	4603      	mov	r3, r0
		sprintf((char *)uart_tx_buf,
 8000ace:	461d      	mov	r5, r3
			  RTC_Bcd2ToByte(time.Seconds)
 8000ad0:	7cbb      	ldrb	r3, [r7, #18]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f8da 	bl	8002c8c <RTC_Bcd2ToByte>
 8000ad8:	4603      	mov	r3, r0
		sprintf((char *)uart_tx_buf,
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	462b      	mov	r3, r5
 8000ade:	4622      	mov	r2, r4
 8000ae0:	4912      	ldr	r1, [pc, #72]	@ (8000b2c <display_rtc_to_serial+0x8c>)
 8000ae2:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <display_rtc_to_serial+0x90>)
 8000ae4:	f002 fcfc 	bl	80034e0 <siprintf>
 8000ae8:	e00e      	b.n	8000b08 <display_rtc_to_serial+0x68>
	    );
	}
	else if (type == RTC_TYPE_DECIMAL){
 8000aea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10a      	bne.n	8000b08 <display_rtc_to_serial+0x68>
		sprintf((char *)uart_tx_buf,
			  "Time: %d:%d:%d\n",
			  time.Hours,
 8000af2:	7c3b      	ldrb	r3, [r7, #16]
		sprintf((char *)uart_tx_buf,
 8000af4:	461a      	mov	r2, r3
			  time.Minutes,
 8000af6:	7c7b      	ldrb	r3, [r7, #17]
		sprintf((char *)uart_tx_buf,
 8000af8:	4619      	mov	r1, r3
			  time.Seconds
 8000afa:	7cbb      	ldrb	r3, [r7, #18]
		sprintf((char *)uart_tx_buf,
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	460b      	mov	r3, r1
 8000b00:	490a      	ldr	r1, [pc, #40]	@ (8000b2c <display_rtc_to_serial+0x8c>)
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <display_rtc_to_serial+0x90>)
 8000b04:	f002 fcec 	bl	80034e0 <siprintf>
		);
	}

	HAL_UART_Transmit(&huart1, uart_tx_buf, strlen((char *)uart_tx_buf), HAL_MAX_DELAY);
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <display_rtc_to_serial+0x90>)
 8000b0a:	f7ff fb69 	bl	80001e0 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <display_rtc_to_serial+0x90>)
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <display_rtc_to_serial+0x94>)
 8000b1a:	f002 f925 	bl	8002d68 <HAL_UART_Transmit>
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000b26:	b004      	add	sp, #16
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	08003ea0 	.word	0x08003ea0
 8000b30:	2000007c 	.word	0x2000007c
 8000b34:	200001b8 	.word	0x200001b8

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b5e:	4a25      	ldr	r2, [pc, #148]	@ (8000bf4 <MX_RTC_Init+0xb0>)
 8000b60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b6a:	227f      	movs	r2, #127	@ 0x7f
 8000b6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b70:	22ff      	movs	r2, #255	@ 0xff
 8000b72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b86:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000b88:	f001 fd92 	bl	80026b0 <HAL_RTC_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b92:	f7ff ffd1 	bl	8000b38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000bb2:	f001 fe00 	bl	80027b6 <HAL_RTC_SetTime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f7ff ffbc 	bl	8000b38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_RTC_Init+0xac>)
 8000bd8:	f001 fee5 	bl	80029a6 <HAL_RTC_SetDate>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000be2:	f7ff ffa9 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//  HAL_RTC_MspInit(&hrtc);
  /* USER CODE END RTC_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000194 	.word	0x20000194
 8000bf4:	40002800 	.word	0x40002800

08000bf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <HAL_RTC_MspInit+0x50>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d111      	bne.n	8000c3e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c22:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fc53 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c34:	f7ff ff80 	bl	8000b38 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <HAL_RTC_MspInit+0x54>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40002800 	.word	0x40002800
 8000c4c:	42470e3c 	.word	0x42470e3c

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <set_process_flag>:
__STATIC_INLINE void set_process_flag(flag_t flag){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	process_flag = flag;
 8000caa:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <set_process_flag+0x1c>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	7013      	strb	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20000079 	.word	0x20000079

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 f99d 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f000 ff5a 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  set_process_flag(FLAG_SHOW_CLOCK);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ffb9 	bl	8000ca0 <set_process_flag>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d36:	2004      	movs	r0, #4
 8000d38:	f000 ff50 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  set_process_flag(FLAG_SET_CLOCK);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ffaf 	bl	8000ca0 <set_process_flag>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f000 ff46 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  set_process_flag(FLAG_INC_TIME);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff ffa5 	bl	8000ca0 <set_process_flag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f000 ff3c 	bl	8001bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  set_process_flag(FLAG_DEC_TIME);
 8000d64:	2004      	movs	r0, #4
 8000d66:	f7ff ff9b 	bl	8000ca0 <set_process_flag>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <DMA2_Stream7_IRQHandler+0x10>)
 8000d76:	f000 fb71 	bl	800145c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000200 	.word	0x20000200

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f002 fbbc 	bl	8003530 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20010000 	.word	0x20010000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200001b4 	.word	0x200001b4
 8000dec:	200003b0 	.word	0x200003b0

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <MX_USART1_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f001 ff3c 	bl	8002cc8 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f7ff fe6f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001b8 	.word	0x200001b8
 8000e64:	40011000 	.word	0x40011000

08000e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a30      	ldr	r2, [pc, #192]	@ (8000f48 <HAL_UART_MspInit+0xe0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d15a      	bne.n	8000f40 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a2e      	ldr	r2, [pc, #184]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b25      	ldr	r3, [pc, #148]	@ (8000f4c <HAL_UART_MspInit+0xe4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <HAL_UART_MspInit+0xe8>)
 8000ee0:	f000 fcf8 	bl	80018d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <HAL_UART_MspInit+0xf0>)
 8000ee8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000eec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ef0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000ef4:	2240      	movs	r2, #64	@ 0x40
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f24:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f26:	f000 f9eb 	bl	8001300 <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f30:	f7ff fe02 	bl	8000b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f3a:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_UART_MspInit+0xec>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	@ 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	20000200 	.word	0x20000200
 8000f58:	400264b8 	.word	0x400264b8

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f60:	f7ff ff46 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fad7 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fbd5 	bl	800073c <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fa0:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000fa4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa8:	200003ac 	.word	0x200003ac

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fe34 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000260 	.word	0x20000260

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000260 	.word	0x20000260

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feb6 	bl	800107c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fe9d 	bl	800107c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9e9 	bl	80017dc <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	@ 0x40
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9a0 	bl	8001770 <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001438:	223f      	movs	r2, #63	@ 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001468:	4b8e      	ldr	r3, [pc, #568]	@ (80016a4 <HAL_DMA_IRQHandler+0x248>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a8e      	ldr	r2, [pc, #568]	@ (80016a8 <HAL_DMA_IRQHandler+0x24c>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0a9b      	lsrs	r3, r3, #10
 8001474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001486:	2208      	movs	r2, #8
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	2208      	movs	r2, #8
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	2201      	movs	r2, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ea:	2201      	movs	r2, #1
 80014ec:	409a      	lsls	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f6:	f043 0202 	orr.w	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001502:	2204      	movs	r2, #4
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d012      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001520:	2204      	movs	r2, #4
 8001522:	409a      	lsls	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001538:	2210      	movs	r2, #16
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d043      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03c      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	2210      	movs	r2, #16
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d018      	beq.n	800159e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
 800158a:	e01f      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01b      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
 800159c:	e016      	b.n	80015cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0208 	bic.w	r2, r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	2220      	movs	r2, #32
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 808f 	beq.w	80016fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8087 	beq.w	80016fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f2:	2220      	movs	r2, #32
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b05      	cmp	r3, #5
 8001604:	d136      	bne.n	8001674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0216 	bic.w	r2, r2, #22
 8001614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_DMA_IRQHandler+0x1da>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164a:	223f      	movs	r2, #63	@ 0x3f
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001666:	2b00      	cmp	r3, #0
 8001668:	d07e      	beq.n	8001768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
        }
        return;
 8001672:	e079      	b.n	8001768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01d      	beq.n	80016be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	2b00      	cmp	r3, #0
 8001696:	d031      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e02c      	b.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000
 80016a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d023      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e01e      	b.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0210 	bic.w	r2, r2, #16
 80016da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	d032      	beq.n	800176a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d022      	beq.n	8001756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2205      	movs	r2, #5
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	d307      	bcc.n	8001744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f2      	bne.n	8001728 <HAL_DMA_IRQHandler+0x2cc>
 8001742:	e000      	b.n	8001746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e000      	b.n	800176a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001768:	bf00      	nop
    }
  }
}
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3b10      	subs	r3, #16
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800178a:	4a13      	ldr	r2, [pc, #76]	@ (80017d8 <DMA_CalcBaseAndBitshift+0x68>)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d909      	bls.n	80017b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	1d1a      	adds	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80017b0:	e007      	b.n	80017c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	aaaaaaab 	.word	0xaaaaaaab
 80017d8:	08003ec8 	.word	0x08003ec8

080017dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11f      	bne.n	8001836 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d856      	bhi.n	80018aa <DMA_CheckFifoParam+0xce>
 80017fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <DMA_CheckFifoParam+0x28>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001827 	.word	0x08001827
 800180c:	08001815 	.word	0x08001815
 8001810:	080018ab 	.word	0x080018ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d046      	beq.n	80018ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001824:	e043      	b.n	80018ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800182e:	d140      	bne.n	80018b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001834:	e03d      	b.n	80018b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800183e:	d121      	bne.n	8001884 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d837      	bhi.n	80018b6 <DMA_CheckFifoParam+0xda>
 8001846:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <DMA_CheckFifoParam+0x70>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	0800185d 	.word	0x0800185d
 8001850:	08001863 	.word	0x08001863
 8001854:	0800185d 	.word	0x0800185d
 8001858:	08001875 	.word	0x08001875
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
      break;
 8001860:	e030      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d025      	beq.n	80018ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001872:	e022      	b.n	80018ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800187c:	d11f      	bne.n	80018be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001882:	e01c      	b.n	80018be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d903      	bls.n	8001892 <DMA_CheckFifoParam+0xb6>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d003      	beq.n	8001898 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001890:	e018      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      break;
 8001896:	e015      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      break;
 80018a8:	e00b      	b.n	80018c2 <DMA_CheckFifoParam+0xe6>
      break;
 80018aa:	bf00      	nop
 80018ac:	e00a      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e008      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
 80018b4:	e006      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e004      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ba:	bf00      	nop
 80018bc:	e002      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
    }
  } 
  
  return status; 
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e159      	b.n	8001ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8148 	bne.w	8001b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	2b02      	cmp	r3, #2
 8001924:	d130      	bne.n	8001988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x202>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	@ (8001bc8 <HAL_GPIO_Init+0x2f4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fe>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a47      	ldr	r2, [pc, #284]	@ (8001bcc <HAL_GPIO_Init+0x2f8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1fa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	@ (8001bd0 <HAL_GPIO_Init+0x2fc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1f6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a45      	ldr	r2, [pc, #276]	@ (8001bd4 <HAL_GPIO_Init+0x300>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1f2>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f aea2 	bls.w	80018f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f806 	bl	8001c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013c00 	.word	0x40013c00

08001c0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e267      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b85      	ldr	r3, [pc, #532]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b82      	ldr	r3, [pc, #520]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e242      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4b76      	ldr	r3, [pc, #472]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4b70      	ldr	r3, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a65      	ldr	r2, [pc, #404]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9ce 	bl	800107c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f9ca 	bl	800107c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e207      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9ba 	bl	800107c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f9b6 	bl	800107c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1f3      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1c7      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4937      	ldr	r1, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f96f 	bl	800107c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff f96b 	bl	800107c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1a8      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4925      	ldr	r1, [pc, #148]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f94e 	bl	800107c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff f94a 	bl	800107c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e187      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d036      	beq.n	8001e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f92e 	bl	800107c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff f92a 	bl	800107c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e167      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
 8001e42:	e01b      	b.n	8001e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f917 	bl	800107c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e00e      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff f913 	bl	800107c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d907      	bls.n	8001e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e150      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470000 	.word	0x42470000
 8001e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ea      	bne.n	8001e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8097 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b81      	ldr	r3, [pc, #516]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b77      	ldr	r3, [pc, #476]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b74      	ldr	r3, [pc, #464]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a73      	ldr	r2, [pc, #460]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f8d3 	bl	800107c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff f8cf 	bl	800107c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e10c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ea>
 8001f00:	4b64      	ldr	r3, [pc, #400]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a63      	ldr	r2, [pc, #396]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x30c>
 8001f16:	4b5f      	ldr	r3, [pc, #380]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f22:	4b5c      	ldr	r3, [pc, #368]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f30:	4b58      	ldr	r3, [pc, #352]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a57      	ldr	r2, [pc, #348]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3c:	4b55      	ldr	r3, [pc, #340]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f40:	4a54      	ldr	r2, [pc, #336]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff f894 	bl	800107c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff f890 	bl	800107c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0cb      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4b49      	ldr	r3, [pc, #292]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ee      	beq.n	8001f58 <HAL_RCC_OscConfig+0x334>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f87e 	bl	800107c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f87a 	bl	800107c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0b5      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ee      	bne.n	8001f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	4a38      	ldr	r2, [pc, #224]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a1 	beq.w	8002104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc2:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d05c      	beq.n	8002088 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d141      	bne.n	800205a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f84e 	bl	800107c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f84a 	bl	800107c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e087      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	085b      	lsrs	r3, r3, #1
 800201a:	3b01      	subs	r3, #1
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	491b      	ldr	r1, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f823 	bl	800107c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff f81f 	bl	800107c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e05c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x416>
 8002058:	e054      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff f80c 	bl	800107c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f808 	bl	800107c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e045      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x444>
 8002086:	e03d      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e038      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000
 800209c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_OscConfig+0x4ec>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d028      	beq.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11a      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cc      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b68      	ldr	r3, [pc, #416]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d90c      	bls.n	8002150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b65      	ldr	r3, [pc, #404]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d044      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d119      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b3f      	ldr	r3, [pc, #252]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e067      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4934      	ldr	r1, [pc, #208]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7fe ff3a 	bl	800107c <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe ff36 	bl	800107c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fe9a 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08003eb0 	.word	0x08003eb0
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e4:	b090      	sub	sp, #64	@ 0x40
 80022e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ec:	2300      	movs	r3, #0
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f8:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d00d      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x40>
 8002304:	2b08      	cmp	r3, #8
 8002306:	f200 80a1 	bhi.w	800244c <HAL_RCC_GetSysClockFreq+0x16c>
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x34>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d003      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x3a>
 8002312:	e09b      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x184>)
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002318:	e09b      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800231c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800231e:	e098      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002320:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232a:	4b4d      	ldr	r3, [pc, #308]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	2200      	movs	r2, #0
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	627a      	str	r2, [r7, #36]	@ 0x24
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002348:	2100      	movs	r1, #0
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800234c:	fb03 f201 	mul.w	r2, r3, r1
 8002350:	2300      	movs	r3, #0
 8002352:	fb00 f303 	mul.w	r3, r0, r3
 8002356:	4413      	add	r3, r2
 8002358:	4a43      	ldr	r2, [pc, #268]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x188>)
 800235a:	fba0 1202 	umull	r1, r2, r0, r2
 800235e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002360:	460a      	mov	r2, r1
 8002362:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002366:	4413      	add	r3, r2
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236c:	2200      	movs	r2, #0
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	61fa      	str	r2, [r7, #28]
 8002372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800237a:	f7fd ff89 	bl	8000290 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4613      	mov	r3, r2
 8002384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002386:	e053      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002388:	4b35      	ldr	r3, [pc, #212]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	2200      	movs	r2, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	617a      	str	r2, [r7, #20]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800239a:	f04f 0b00 	mov.w	fp, #0
 800239e:	4652      	mov	r2, sl
 80023a0:	465b      	mov	r3, fp
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0159      	lsls	r1, r3, #5
 80023ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b0:	0150      	lsls	r0, r2, #5
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	ebb2 080a 	subs.w	r8, r2, sl
 80023ba:	eb63 090b 	sbc.w	r9, r3, fp
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023d2:	ebb2 0408 	subs.w	r4, r2, r8
 80023d6:	eb63 0509 	sbc.w	r5, r3, r9
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	00eb      	lsls	r3, r5, #3
 80023e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e8:	00e2      	lsls	r2, r4, #3
 80023ea:	4614      	mov	r4, r2
 80023ec:	461d      	mov	r5, r3
 80023ee:	eb14 030a 	adds.w	r3, r4, sl
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	eb45 030b 	adc.w	r3, r5, fp
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002406:	4629      	mov	r1, r5
 8002408:	028b      	lsls	r3, r1, #10
 800240a:	4621      	mov	r1, r4
 800240c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002410:	4621      	mov	r1, r4
 8002412:	028a      	lsls	r2, r1, #10
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241a:	2200      	movs	r2, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002424:	f7fd ff34 	bl	8000290 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x180>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	3301      	adds	r3, #1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800244a:	e002      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x184>)
 800244e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002454:	4618      	mov	r0, r3
 8002456:	3740      	adds	r7, #64	@ 0x40
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	00f42400 	.word	0x00f42400
 8002468:	017d7840 	.word	0x017d7840

0800246c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002488:	f7ff fff0 	bl	800246c <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0a9b      	lsrs	r3, r3, #10
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08003ec0 	.word	0x08003ec0

080024ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024b0:	f7ff ffdc 	bl	800246c <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0b5b      	lsrs	r3, r3, #13
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08003ec0 	.word	0x08003ec0

080024d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d035      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024fc:	4b67      	ldr	r3, [pc, #412]	@ (800269c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002502:	f7fe fdbb 	bl	800107c <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800250a:	f7fe fdb7 	bl	800107c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0ba      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800251c:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	019a      	lsls	r2, r3, #6
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	071b      	lsls	r3, r3, #28
 8002534:	495a      	ldr	r1, [pc, #360]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800253c:	4b57      	ldr	r3, [pc, #348]	@ (800269c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7fe fd9b 	bl	800107c <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800254a:	f7fe fd97 	bl	800107c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09a      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255c:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8083 	beq.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b49      	ldr	r3, [pc, #292]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a48      	ldr	r2, [pc, #288]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b46      	ldr	r3, [pc, #280]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a43      	ldr	r2, [pc, #268]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800259e:	f7fe fd6d 	bl	800107c <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe fd69 	bl	800107c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e06c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b8:	4b3a      	ldr	r3, [pc, #232]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c4:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02f      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d028      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e2:	4b2f      	ldr	r3, [pc, #188]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ec:	4b2e      	ldr	r3, [pc, #184]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f2:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025f8:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025fe:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d114      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe fd37 	bl	800107c <HAL_GetTick>
 800260e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fd33 	bl	800107c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e034      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ee      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002640:	d10d      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002656:	4912      	ldr	r1, [pc, #72]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
 800265c:	e005      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002664:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002668:	6093      	str	r3, [r2, #8]
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800266c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002676:	490a      	ldr	r1, [pc, #40]	@ (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7c1a      	ldrb	r2, [r3, #16]
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800268e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	42470068 	.word	0x42470068
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470e40 	.word	0x42470e40
 80026ac:	424711e0 	.word	0x424711e0

080026b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7f5b      	ldrb	r3, [r3, #29]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fa8e 	bl	8000bf8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d055      	beq.n	800279c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	22ca      	movs	r2, #202	@ 0xca
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2253      	movs	r2, #83	@ 0x53
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa49 	bl	8002b98 <RTC_EnterInitMode>
 8002706:	4603      	mov	r3, r0
 8002708:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d12c      	bne.n	800276a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800271e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002722:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa50 	bl	8002c06 <RTC_ExitInitMode>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d110      	bne.n	8002792 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	22ff      	movs	r2, #255	@ 0xff
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24
 800279a:	e001      	b.n	80027a0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027b6:	b590      	push	{r4, r7, lr}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	7f1b      	ldrb	r3, [r3, #28]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_RTC_SetTime+0x1c>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e087      	b.n	80028e2 <HAL_RTC_SetTime+0x12c>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2202      	movs	r2, #2
 80027dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d126      	bne.n	8002832 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fa27 	bl	8002c50 <RTC_ByteToBcd2>
 8002802:	4603      	mov	r3, r0
 8002804:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fa20 	bl	8002c50 <RTC_ByteToBcd2>
 8002810:	4603      	mov	r3, r0
 8002812:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002814:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	789b      	ldrb	r3, [r3, #2]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fa18 	bl	8002c50 <RTC_ByteToBcd2>
 8002820:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002822:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	78db      	ldrb	r3, [r3, #3]
 800282a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e018      	b.n	8002864 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002852:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002858:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	22ca      	movs	r2, #202	@ 0xca
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2253      	movs	r2, #83	@ 0x53
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f98f 	bl	8002b98 <RTC_EnterInitMode>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d120      	bne.n	80028c6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800288e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f9a2 	bl	8002c06 <RTC_ExitInitMode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	22ff      	movs	r2, #255	@ 0xff
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]

  return status;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}

080028ea <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800291c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002920:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	0d9b      	lsrs	r3, r3, #22
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11a      	bne.n	800299c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f98e 	bl	8002c8c <RTC_Bcd2ToByte>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f985 	bl	8002c8c <RTC_Bcd2ToByte>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	789b      	ldrb	r3, [r3, #2]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f97c 	bl	8002c8c <RTC_Bcd2ToByte>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	7f1b      	ldrb	r3, [r3, #28]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_RTC_SetDate+0x1c>
 80029be:	2302      	movs	r3, #2
 80029c0:	e071      	b.n	8002aa6 <HAL_RTC_SetDate+0x100>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2202      	movs	r2, #2
 80029cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10e      	bne.n	80029f2 <HAL_RTC_SetDate+0x4c>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	f023 0310 	bic.w	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	330a      	adds	r3, #10
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11c      	bne.n	8002a32 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	78db      	ldrb	r3, [r3, #3]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f927 	bl	8002c50 <RTC_ByteToBcd2>
 8002a02:	4603      	mov	r3, r0
 8002a04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f920 	bl	8002c50 <RTC_ByteToBcd2>
 8002a10:	4603      	mov	r3, r0
 8002a12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	789b      	ldrb	r3, [r3, #2]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f918 	bl	8002c50 <RTC_ByteToBcd2>
 8002a20:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a22:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e00e      	b.n	8002a50 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	78db      	ldrb	r3, [r3, #3]
 8002a36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a3e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	22ca      	movs	r2, #202	@ 0xca
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2253      	movs	r2, #83	@ 0x53
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f899 	bl	8002b98 <RTC_EnterInitMode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8c0 	bl	8002c06 <RTC_ExitInitMode>
 8002a86:	4603      	mov	r3, r0
 8002a88:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	22ff      	movs	r2, #255	@ 0xff
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]

  return status;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}

08002aae <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ac8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002acc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	0b5b      	lsrs	r3, r3, #13
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11a      	bne.n	8002b42 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	78db      	ldrb	r3, [r3, #3]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f8bb 	bl	8002c8c <RTC_Bcd2ToByte>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8b2 	bl	8002c8c <RTC_Bcd2ToByte>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f8a9 	bl	8002c8c <RTC_Bcd2ToByte>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <HAL_RTC_WaitForSynchro+0x48>)
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7fe fa8c 	bl	800107c <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b66:	e009      	b.n	8002b7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b68:	f7fe fa88 	bl	800107c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b76:	d901      	bls.n	8002b7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e007      	b.n	8002b8c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	00013f5f 	.word	0x00013f5f

08002b98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d122      	bne.n	8002bfc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe fa59 	bl	800107c <HAL_GetTick>
 8002bca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bcc:	e00c      	b.n	8002be8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bce:	f7fe fa55 	bl	800107c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bdc:	d904      	bls.n	8002be8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <RTC_EnterInitMode+0x64>
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d1e8      	bne.n	8002bce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c20:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff8b 	bl	8002b4c <HAL_RTC_WaitForSynchro>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002c5e:	e005      	b.n	8002c6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	3b0a      	subs	r3, #10
 8002c6a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	d8f6      	bhi.n	8002c60 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b2db      	uxtb	r3, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	b2db      	uxtb	r3, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e042      	b.n	8002d60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f8ba 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	@ 0x24
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f973 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d175      	bne.n	8002e74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Transmit+0x2c>
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e06e      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2221      	movs	r2, #33	@ 0x21
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da6:	f7fe f969 	bl	800107c <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_UART_Transmit+0x6c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e003      	b.n	8002ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ddc:	e02e      	b.n	8002e3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f848 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e03a      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e007      	b.n	8002e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1cb      	bne.n	8002dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2140      	movs	r1, #64	@ 0x40
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f814 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e006      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	e03b      	b.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d037      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe f8f0 	bl	800107c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e03a      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b80      	cmp	r3, #128	@ 0x80
 8002ec4:	d020      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d01d      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d116      	bne.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f81d 	bl	8002f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00f      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d0b4      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b095      	sub	sp, #84	@ 0x54
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f58:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3314      	adds	r3, #20
 8002f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d119      	bne.n	8002fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 0310 	bic.w	r3, r3, #16
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc8:	61ba      	str	r2, [r7, #24]
 8002fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6979      	ldr	r1, [r7, #20]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fea:	bf00      	nop
 8002fec:	3754      	adds	r7, #84	@ 0x54
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b0c0      	sub	sp, #256	@ 0x100
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	ea40 0301 	orr.w	r3, r0, r1
 8003020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003050:	f021 010c 	bic.w	r1, r1, #12
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	ea40 0301 	orr.w	r3, r0, r1
 800307e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8f      	ldr	r3, [pc, #572]	@ (80032c4 <UART_SetConfig+0x2cc>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <UART_SetConfig+0xa0>
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8d      	ldr	r3, [pc, #564]	@ (80032c8 <UART_SetConfig+0x2d0>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff fa08 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 800309c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030a0:	e003      	b.n	80030aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff f9ef 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 80030a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b4:	f040 810c 	bne.w	80032d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030d2:	415b      	adcs	r3, r3
 80030d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030da:	4621      	mov	r1, r4
 80030dc:	eb12 0801 	adds.w	r8, r2, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb43 0901 	adc.w	r9, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb18 0303 	adds.w	r3, r8, r3
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003108:	462b      	mov	r3, r5
 800310a:	eb49 0303 	adc.w	r3, r9, r3
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003126:	460b      	mov	r3, r1
 8003128:	18db      	adds	r3, r3, r3
 800312a:	653b      	str	r3, [r7, #80]	@ 0x50
 800312c:	4613      	mov	r3, r2
 800312e:	eb42 0303 	adc.w	r3, r2, r3
 8003132:	657b      	str	r3, [r7, #84]	@ 0x54
 8003134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800313c:	f7fd f8a8 	bl	8000290 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011c      	lsls	r4, r3, #4
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800315c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003168:	415b      	adcs	r3, r3
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003170:	4641      	mov	r1, r8
 8003172:	eb12 0a01 	adds.w	sl, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0b01 	adc.w	fp, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800318c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003190:	4692      	mov	sl, r2
 8003192:	469b      	mov	fp, r3
 8003194:	4643      	mov	r3, r8
 8003196:	eb1a 0303 	adds.w	r3, sl, r3
 800319a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800319e:	464b      	mov	r3, r9
 80031a0:	eb4b 0303 	adc.w	r3, fp, r3
 80031a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031bc:	460b      	mov	r3, r1
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c2:	4613      	mov	r3, r2
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031d2:	f7fd f85d 	bl	8000290 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031f2:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031f4:	fba3 2302 	umull	r2, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003200:	441c      	add	r4, r3
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800320c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800321c:	415b      	adcs	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003224:	4641      	mov	r1, r8
 8003226:	1851      	adds	r1, r2, r1
 8003228:	6339      	str	r1, [r7, #48]	@ 0x30
 800322a:	4649      	mov	r1, r9
 800322c:	414b      	adcs	r3, r1
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800323c:	4659      	mov	r1, fp
 800323e:	00cb      	lsls	r3, r1, #3
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003246:	4651      	mov	r1, sl
 8003248:	00ca      	lsls	r2, r1, #3
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4603      	mov	r3, r0
 8003250:	4642      	mov	r2, r8
 8003252:	189b      	adds	r3, r3, r2
 8003254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003258:	464b      	mov	r3, r9
 800325a:	460a      	mov	r2, r1
 800325c:	eb42 0303 	adc.w	r3, r2, r3
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800328a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800328e:	f7fc ffff 	bl	8000290 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	@ 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	@ 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <UART_SetConfig+0x2d4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 0207 	and.w	r2, r3, #7
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c0:	e106      	b.n	80034d0 <UART_SetConfig+0x4d8>
 80032c2:	bf00      	nop
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	6239      	str	r1, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1854      	adds	r4, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0501 	adc.w	r5, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	00eb      	lsls	r3, r5, #3
 8003306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	4643      	mov	r3, r8
 8003312:	18e3      	adds	r3, r4, r3
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003318:	464b      	mov	r3, r9
 800331a:	eb45 0303 	adc.w	r3, r5, r3
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800333e:	4629      	mov	r1, r5
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003348:	4621      	mov	r1, r4
 800334a:	008a      	lsls	r2, r1, #2
 800334c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003350:	f7fc ff9e 	bl	8000290 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b60      	ldr	r3, [pc, #384]	@ (80034dc <UART_SetConfig+0x4e4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800336c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	61b9      	str	r1, [r7, #24]
 800337c:	415b      	adcs	r3, r3
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6139      	str	r1, [r7, #16]
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033dc:	4649      	mov	r1, r9
 80033de:	008b      	lsls	r3, r1, #2
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e6:	4641      	mov	r1, r8
 80033e8:	008a      	lsls	r2, r1, #2
 80033ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033ee:	f7fc ff4f 	bl	8000290 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <UART_SetConfig+0x4e4>)
 80033fa:	fba3 2301 	umull	r2, r3, r3, r1
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2264      	movs	r2, #100	@ 0x64
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	1acb      	subs	r3, r1, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	3332      	adds	r3, #50	@ 0x32
 800340c:	4a33      	ldr	r2, [pc, #204]	@ (80034dc <UART_SetConfig+0x4e4>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	673b      	str	r3, [r7, #112]	@ 0x70
 8003422:	677a      	str	r2, [r7, #116]	@ 0x74
 8003424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	415b      	adcs	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800346a:	464b      	mov	r3, r9
 800346c:	460a      	mov	r2, r1
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	663b      	str	r3, [r7, #96]	@ 0x60
 800347e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800349e:	f7fc fef7 	bl	8000290 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	@ 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	3332      	adds	r3, #50	@ 0x32
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4422      	add	r2, r4
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034d6:	46bd      	mov	sp, r7
 80034d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <siprintf>:
 80034e0:	b40e      	push	{r1, r2, r3}
 80034e2:	b500      	push	{lr}
 80034e4:	b09c      	sub	sp, #112	@ 0x70
 80034e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80034e8:	9002      	str	r0, [sp, #8]
 80034ea:	9006      	str	r0, [sp, #24]
 80034ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80034f0:	4809      	ldr	r0, [pc, #36]	@ (8003518 <siprintf+0x38>)
 80034f2:	9107      	str	r1, [sp, #28]
 80034f4:	9104      	str	r1, [sp, #16]
 80034f6:	4909      	ldr	r1, [pc, #36]	@ (800351c <siprintf+0x3c>)
 80034f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	a902      	add	r1, sp, #8
 8003504:	f000 f994 	bl	8003830 <_svfiprintf_r>
 8003508:	9b02      	ldr	r3, [sp, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	b01c      	add	sp, #112	@ 0x70
 8003510:	f85d eb04 	ldr.w	lr, [sp], #4
 8003514:	b003      	add	sp, #12
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c
 800351c:	ffff0208 	.word	0xffff0208

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <__errno>:
 8003530:	4b01      	ldr	r3, [pc, #4]	@ (8003538 <__errno+0x8>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4d0d      	ldr	r5, [pc, #52]	@ (8003574 <__libc_init_array+0x38>)
 8003540:	4c0d      	ldr	r4, [pc, #52]	@ (8003578 <__libc_init_array+0x3c>)
 8003542:	1b64      	subs	r4, r4, r5
 8003544:	10a4      	asrs	r4, r4, #2
 8003546:	2600      	movs	r6, #0
 8003548:	42a6      	cmp	r6, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	4d0b      	ldr	r5, [pc, #44]	@ (800357c <__libc_init_array+0x40>)
 800354e:	4c0c      	ldr	r4, [pc, #48]	@ (8003580 <__libc_init_array+0x44>)
 8003550:	f000 fc66 	bl	8003e20 <_init>
 8003554:	1b64      	subs	r4, r4, r5
 8003556:	10a4      	asrs	r4, r4, #2
 8003558:	2600      	movs	r6, #0
 800355a:	42a6      	cmp	r6, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	f855 3b04 	ldr.w	r3, [r5], #4
 8003564:	4798      	blx	r3
 8003566:	3601      	adds	r6, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	f855 3b04 	ldr.w	r3, [r5], #4
 800356e:	4798      	blx	r3
 8003570:	3601      	adds	r6, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	08003f0c 	.word	0x08003f0c
 8003578:	08003f0c 	.word	0x08003f0c
 800357c:	08003f0c 	.word	0x08003f0c
 8003580:	08003f10 	.word	0x08003f10

08003584 <__retarget_lock_acquire_recursive>:
 8003584:	4770      	bx	lr

08003586 <__retarget_lock_release_recursive>:
 8003586:	4770      	bx	lr

08003588 <_free_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	4605      	mov	r5, r0
 800358c:	2900      	cmp	r1, #0
 800358e:	d041      	beq.n	8003614 <_free_r+0x8c>
 8003590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003594:	1f0c      	subs	r4, r1, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfb8      	it	lt
 800359a:	18e4      	addlt	r4, r4, r3
 800359c:	f000 f8e0 	bl	8003760 <__malloc_lock>
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <_free_r+0x90>)
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	b933      	cbnz	r3, 80035b4 <_free_r+0x2c>
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	6014      	str	r4, [r2, #0]
 80035aa:	4628      	mov	r0, r5
 80035ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035b0:	f000 b8dc 	b.w	800376c <__malloc_unlock>
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d908      	bls.n	80035ca <_free_r+0x42>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	1821      	adds	r1, r4, r0
 80035bc:	428b      	cmp	r3, r1
 80035be:	bf01      	itttt	eq
 80035c0:	6819      	ldreq	r1, [r3, #0]
 80035c2:	685b      	ldreq	r3, [r3, #4]
 80035c4:	1809      	addeq	r1, r1, r0
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	e7ed      	b.n	80035a6 <_free_r+0x1e>
 80035ca:	461a      	mov	r2, r3
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b10b      	cbz	r3, 80035d4 <_free_r+0x4c>
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d9fa      	bls.n	80035ca <_free_r+0x42>
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	1850      	adds	r0, r2, r1
 80035d8:	42a0      	cmp	r0, r4
 80035da:	d10b      	bne.n	80035f4 <_free_r+0x6c>
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	4401      	add	r1, r0
 80035e0:	1850      	adds	r0, r2, r1
 80035e2:	4283      	cmp	r3, r0
 80035e4:	6011      	str	r1, [r2, #0]
 80035e6:	d1e0      	bne.n	80035aa <_free_r+0x22>
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	6053      	str	r3, [r2, #4]
 80035ee:	4408      	add	r0, r1
 80035f0:	6010      	str	r0, [r2, #0]
 80035f2:	e7da      	b.n	80035aa <_free_r+0x22>
 80035f4:	d902      	bls.n	80035fc <_free_r+0x74>
 80035f6:	230c      	movs	r3, #12
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	e7d6      	b.n	80035aa <_free_r+0x22>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	1821      	adds	r1, r4, r0
 8003600:	428b      	cmp	r3, r1
 8003602:	bf04      	itt	eq
 8003604:	6819      	ldreq	r1, [r3, #0]
 8003606:	685b      	ldreq	r3, [r3, #4]
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	bf04      	itt	eq
 800360c:	1809      	addeq	r1, r1, r0
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	6054      	str	r4, [r2, #4]
 8003612:	e7ca      	b.n	80035aa <_free_r+0x22>
 8003614:	bd38      	pop	{r3, r4, r5, pc}
 8003616:	bf00      	nop
 8003618:	200003a8 	.word	0x200003a8

0800361c <sbrk_aligned>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4e0f      	ldr	r6, [pc, #60]	@ (800365c <sbrk_aligned+0x40>)
 8003620:	460c      	mov	r4, r1
 8003622:	6831      	ldr	r1, [r6, #0]
 8003624:	4605      	mov	r5, r0
 8003626:	b911      	cbnz	r1, 800362e <sbrk_aligned+0x12>
 8003628:	f000 fba6 	bl	8003d78 <_sbrk_r>
 800362c:	6030      	str	r0, [r6, #0]
 800362e:	4621      	mov	r1, r4
 8003630:	4628      	mov	r0, r5
 8003632:	f000 fba1 	bl	8003d78 <_sbrk_r>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d103      	bne.n	8003642 <sbrk_aligned+0x26>
 800363a:	f04f 34ff 	mov.w	r4, #4294967295
 800363e:	4620      	mov	r0, r4
 8003640:	bd70      	pop	{r4, r5, r6, pc}
 8003642:	1cc4      	adds	r4, r0, #3
 8003644:	f024 0403 	bic.w	r4, r4, #3
 8003648:	42a0      	cmp	r0, r4
 800364a:	d0f8      	beq.n	800363e <sbrk_aligned+0x22>
 800364c:	1a21      	subs	r1, r4, r0
 800364e:	4628      	mov	r0, r5
 8003650:	f000 fb92 	bl	8003d78 <_sbrk_r>
 8003654:	3001      	adds	r0, #1
 8003656:	d1f2      	bne.n	800363e <sbrk_aligned+0x22>
 8003658:	e7ef      	b.n	800363a <sbrk_aligned+0x1e>
 800365a:	bf00      	nop
 800365c:	200003a4 	.word	0x200003a4

08003660 <_malloc_r>:
 8003660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	1ccd      	adds	r5, r1, #3
 8003666:	f025 0503 	bic.w	r5, r5, #3
 800366a:	3508      	adds	r5, #8
 800366c:	2d0c      	cmp	r5, #12
 800366e:	bf38      	it	cc
 8003670:	250c      	movcc	r5, #12
 8003672:	2d00      	cmp	r5, #0
 8003674:	4606      	mov	r6, r0
 8003676:	db01      	blt.n	800367c <_malloc_r+0x1c>
 8003678:	42a9      	cmp	r1, r5
 800367a:	d904      	bls.n	8003686 <_malloc_r+0x26>
 800367c:	230c      	movs	r3, #12
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	2000      	movs	r0, #0
 8003682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800375c <_malloc_r+0xfc>
 800368a:	f000 f869 	bl	8003760 <__malloc_lock>
 800368e:	f8d8 3000 	ldr.w	r3, [r8]
 8003692:	461c      	mov	r4, r3
 8003694:	bb44      	cbnz	r4, 80036e8 <_malloc_r+0x88>
 8003696:	4629      	mov	r1, r5
 8003698:	4630      	mov	r0, r6
 800369a:	f7ff ffbf 	bl	800361c <sbrk_aligned>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	4604      	mov	r4, r0
 80036a2:	d158      	bne.n	8003756 <_malloc_r+0xf6>
 80036a4:	f8d8 4000 	ldr.w	r4, [r8]
 80036a8:	4627      	mov	r7, r4
 80036aa:	2f00      	cmp	r7, #0
 80036ac:	d143      	bne.n	8003736 <_malloc_r+0xd6>
 80036ae:	2c00      	cmp	r4, #0
 80036b0:	d04b      	beq.n	800374a <_malloc_r+0xea>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	4639      	mov	r1, r7
 80036b6:	4630      	mov	r0, r6
 80036b8:	eb04 0903 	add.w	r9, r4, r3
 80036bc:	f000 fb5c 	bl	8003d78 <_sbrk_r>
 80036c0:	4581      	cmp	r9, r0
 80036c2:	d142      	bne.n	800374a <_malloc_r+0xea>
 80036c4:	6821      	ldr	r1, [r4, #0]
 80036c6:	1a6d      	subs	r5, r5, r1
 80036c8:	4629      	mov	r1, r5
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7ff ffa6 	bl	800361c <sbrk_aligned>
 80036d0:	3001      	adds	r0, #1
 80036d2:	d03a      	beq.n	800374a <_malloc_r+0xea>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	442b      	add	r3, r5
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	f8d8 3000 	ldr.w	r3, [r8]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	bb62      	cbnz	r2, 800373c <_malloc_r+0xdc>
 80036e2:	f8c8 7000 	str.w	r7, [r8]
 80036e6:	e00f      	b.n	8003708 <_malloc_r+0xa8>
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	1b52      	subs	r2, r2, r5
 80036ec:	d420      	bmi.n	8003730 <_malloc_r+0xd0>
 80036ee:	2a0b      	cmp	r2, #11
 80036f0:	d917      	bls.n	8003722 <_malloc_r+0xc2>
 80036f2:	1961      	adds	r1, r4, r5
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	6025      	str	r5, [r4, #0]
 80036f8:	bf18      	it	ne
 80036fa:	6059      	strne	r1, [r3, #4]
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	bf08      	it	eq
 8003700:	f8c8 1000 	streq.w	r1, [r8]
 8003704:	5162      	str	r2, [r4, r5]
 8003706:	604b      	str	r3, [r1, #4]
 8003708:	4630      	mov	r0, r6
 800370a:	f000 f82f 	bl	800376c <__malloc_unlock>
 800370e:	f104 000b 	add.w	r0, r4, #11
 8003712:	1d23      	adds	r3, r4, #4
 8003714:	f020 0007 	bic.w	r0, r0, #7
 8003718:	1ac2      	subs	r2, r0, r3
 800371a:	bf1c      	itt	ne
 800371c:	1a1b      	subne	r3, r3, r0
 800371e:	50a3      	strne	r3, [r4, r2]
 8003720:	e7af      	b.n	8003682 <_malloc_r+0x22>
 8003722:	6862      	ldr	r2, [r4, #4]
 8003724:	42a3      	cmp	r3, r4
 8003726:	bf0c      	ite	eq
 8003728:	f8c8 2000 	streq.w	r2, [r8]
 800372c:	605a      	strne	r2, [r3, #4]
 800372e:	e7eb      	b.n	8003708 <_malloc_r+0xa8>
 8003730:	4623      	mov	r3, r4
 8003732:	6864      	ldr	r4, [r4, #4]
 8003734:	e7ae      	b.n	8003694 <_malloc_r+0x34>
 8003736:	463c      	mov	r4, r7
 8003738:	687f      	ldr	r7, [r7, #4]
 800373a:	e7b6      	b.n	80036aa <_malloc_r+0x4a>
 800373c:	461a      	mov	r2, r3
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	42a3      	cmp	r3, r4
 8003742:	d1fb      	bne.n	800373c <_malloc_r+0xdc>
 8003744:	2300      	movs	r3, #0
 8003746:	6053      	str	r3, [r2, #4]
 8003748:	e7de      	b.n	8003708 <_malloc_r+0xa8>
 800374a:	230c      	movs	r3, #12
 800374c:	6033      	str	r3, [r6, #0]
 800374e:	4630      	mov	r0, r6
 8003750:	f000 f80c 	bl	800376c <__malloc_unlock>
 8003754:	e794      	b.n	8003680 <_malloc_r+0x20>
 8003756:	6005      	str	r5, [r0, #0]
 8003758:	e7d6      	b.n	8003708 <_malloc_r+0xa8>
 800375a:	bf00      	nop
 800375c:	200003a8 	.word	0x200003a8

08003760 <__malloc_lock>:
 8003760:	4801      	ldr	r0, [pc, #4]	@ (8003768 <__malloc_lock+0x8>)
 8003762:	f7ff bf0f 	b.w	8003584 <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	200003a0 	.word	0x200003a0

0800376c <__malloc_unlock>:
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <__malloc_unlock+0x8>)
 800376e:	f7ff bf0a 	b.w	8003586 <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	200003a0 	.word	0x200003a0

08003778 <__ssputs_r>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	688e      	ldr	r6, [r1, #8]
 800377e:	461f      	mov	r7, r3
 8003780:	42be      	cmp	r6, r7
 8003782:	680b      	ldr	r3, [r1, #0]
 8003784:	4682      	mov	sl, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4690      	mov	r8, r2
 800378a:	d82d      	bhi.n	80037e8 <__ssputs_r+0x70>
 800378c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003794:	d026      	beq.n	80037e4 <__ssputs_r+0x6c>
 8003796:	6965      	ldr	r5, [r4, #20]
 8003798:	6909      	ldr	r1, [r1, #16]
 800379a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800379e:	eba3 0901 	sub.w	r9, r3, r1
 80037a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037a6:	1c7b      	adds	r3, r7, #1
 80037a8:	444b      	add	r3, r9
 80037aa:	106d      	asrs	r5, r5, #1
 80037ac:	429d      	cmp	r5, r3
 80037ae:	bf38      	it	cc
 80037b0:	461d      	movcc	r5, r3
 80037b2:	0553      	lsls	r3, r2, #21
 80037b4:	d527      	bpl.n	8003806 <__ssputs_r+0x8e>
 80037b6:	4629      	mov	r1, r5
 80037b8:	f7ff ff52 	bl	8003660 <_malloc_r>
 80037bc:	4606      	mov	r6, r0
 80037be:	b360      	cbz	r0, 800381a <__ssputs_r+0xa2>
 80037c0:	6921      	ldr	r1, [r4, #16]
 80037c2:	464a      	mov	r2, r9
 80037c4:	f000 fae8 	bl	8003d98 <memcpy>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	6126      	str	r6, [r4, #16]
 80037d6:	6165      	str	r5, [r4, #20]
 80037d8:	444e      	add	r6, r9
 80037da:	eba5 0509 	sub.w	r5, r5, r9
 80037de:	6026      	str	r6, [r4, #0]
 80037e0:	60a5      	str	r5, [r4, #8]
 80037e2:	463e      	mov	r6, r7
 80037e4:	42be      	cmp	r6, r7
 80037e6:	d900      	bls.n	80037ea <__ssputs_r+0x72>
 80037e8:	463e      	mov	r6, r7
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	4632      	mov	r2, r6
 80037ee:	4641      	mov	r1, r8
 80037f0:	f000 faa8 	bl	8003d44 <memmove>
 80037f4:	68a3      	ldr	r3, [r4, #8]
 80037f6:	1b9b      	subs	r3, r3, r6
 80037f8:	60a3      	str	r3, [r4, #8]
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	4433      	add	r3, r6
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	2000      	movs	r0, #0
 8003802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003806:	462a      	mov	r2, r5
 8003808:	f000 fad4 	bl	8003db4 <_realloc_r>
 800380c:	4606      	mov	r6, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d1e0      	bne.n	80037d4 <__ssputs_r+0x5c>
 8003812:	6921      	ldr	r1, [r4, #16]
 8003814:	4650      	mov	r0, sl
 8003816:	f7ff feb7 	bl	8003588 <_free_r>
 800381a:	230c      	movs	r3, #12
 800381c:	f8ca 3000 	str.w	r3, [sl]
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003826:	81a3      	strh	r3, [r4, #12]
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	e7e9      	b.n	8003802 <__ssputs_r+0x8a>
	...

08003830 <_svfiprintf_r>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	4698      	mov	r8, r3
 8003836:	898b      	ldrh	r3, [r1, #12]
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	b09d      	sub	sp, #116	@ 0x74
 800383c:	4607      	mov	r7, r0
 800383e:	460d      	mov	r5, r1
 8003840:	4614      	mov	r4, r2
 8003842:	d510      	bpl.n	8003866 <_svfiprintf_r+0x36>
 8003844:	690b      	ldr	r3, [r1, #16]
 8003846:	b973      	cbnz	r3, 8003866 <_svfiprintf_r+0x36>
 8003848:	2140      	movs	r1, #64	@ 0x40
 800384a:	f7ff ff09 	bl	8003660 <_malloc_r>
 800384e:	6028      	str	r0, [r5, #0]
 8003850:	6128      	str	r0, [r5, #16]
 8003852:	b930      	cbnz	r0, 8003862 <_svfiprintf_r+0x32>
 8003854:	230c      	movs	r3, #12
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	b01d      	add	sp, #116	@ 0x74
 800385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003862:	2340      	movs	r3, #64	@ 0x40
 8003864:	616b      	str	r3, [r5, #20]
 8003866:	2300      	movs	r3, #0
 8003868:	9309      	str	r3, [sp, #36]	@ 0x24
 800386a:	2320      	movs	r3, #32
 800386c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003870:	f8cd 800c 	str.w	r8, [sp, #12]
 8003874:	2330      	movs	r3, #48	@ 0x30
 8003876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a14 <_svfiprintf_r+0x1e4>
 800387a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800387e:	f04f 0901 	mov.w	r9, #1
 8003882:	4623      	mov	r3, r4
 8003884:	469a      	mov	sl, r3
 8003886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800388a:	b10a      	cbz	r2, 8003890 <_svfiprintf_r+0x60>
 800388c:	2a25      	cmp	r2, #37	@ 0x25
 800388e:	d1f9      	bne.n	8003884 <_svfiprintf_r+0x54>
 8003890:	ebba 0b04 	subs.w	fp, sl, r4
 8003894:	d00b      	beq.n	80038ae <_svfiprintf_r+0x7e>
 8003896:	465b      	mov	r3, fp
 8003898:	4622      	mov	r2, r4
 800389a:	4629      	mov	r1, r5
 800389c:	4638      	mov	r0, r7
 800389e:	f7ff ff6b 	bl	8003778 <__ssputs_r>
 80038a2:	3001      	adds	r0, #1
 80038a4:	f000 80a7 	beq.w	80039f6 <_svfiprintf_r+0x1c6>
 80038a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038aa:	445a      	add	r2, fp
 80038ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80038ae:	f89a 3000 	ldrb.w	r3, [sl]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 809f 	beq.w	80039f6 <_svfiprintf_r+0x1c6>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c2:	f10a 0a01 	add.w	sl, sl, #1
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	9307      	str	r3, [sp, #28]
 80038ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80038d0:	4654      	mov	r4, sl
 80038d2:	2205      	movs	r2, #5
 80038d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d8:	484e      	ldr	r0, [pc, #312]	@ (8003a14 <_svfiprintf_r+0x1e4>)
 80038da:	f7fc fc89 	bl	80001f0 <memchr>
 80038de:	9a04      	ldr	r2, [sp, #16]
 80038e0:	b9d8      	cbnz	r0, 800391a <_svfiprintf_r+0xea>
 80038e2:	06d0      	lsls	r0, r2, #27
 80038e4:	bf44      	itt	mi
 80038e6:	2320      	movmi	r3, #32
 80038e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ec:	0711      	lsls	r1, r2, #28
 80038ee:	bf44      	itt	mi
 80038f0:	232b      	movmi	r3, #43	@ 0x2b
 80038f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038f6:	f89a 3000 	ldrb.w	r3, [sl]
 80038fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80038fc:	d015      	beq.n	800392a <_svfiprintf_r+0xfa>
 80038fe:	9a07      	ldr	r2, [sp, #28]
 8003900:	4654      	mov	r4, sl
 8003902:	2000      	movs	r0, #0
 8003904:	f04f 0c0a 	mov.w	ip, #10
 8003908:	4621      	mov	r1, r4
 800390a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800390e:	3b30      	subs	r3, #48	@ 0x30
 8003910:	2b09      	cmp	r3, #9
 8003912:	d94b      	bls.n	80039ac <_svfiprintf_r+0x17c>
 8003914:	b1b0      	cbz	r0, 8003944 <_svfiprintf_r+0x114>
 8003916:	9207      	str	r2, [sp, #28]
 8003918:	e014      	b.n	8003944 <_svfiprintf_r+0x114>
 800391a:	eba0 0308 	sub.w	r3, r0, r8
 800391e:	fa09 f303 	lsl.w	r3, r9, r3
 8003922:	4313      	orrs	r3, r2
 8003924:	9304      	str	r3, [sp, #16]
 8003926:	46a2      	mov	sl, r4
 8003928:	e7d2      	b.n	80038d0 <_svfiprintf_r+0xa0>
 800392a:	9b03      	ldr	r3, [sp, #12]
 800392c:	1d19      	adds	r1, r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	9103      	str	r1, [sp, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfbb      	ittet	lt
 8003936:	425b      	neglt	r3, r3
 8003938:	f042 0202 	orrlt.w	r2, r2, #2
 800393c:	9307      	strge	r3, [sp, #28]
 800393e:	9307      	strlt	r3, [sp, #28]
 8003940:	bfb8      	it	lt
 8003942:	9204      	strlt	r2, [sp, #16]
 8003944:	7823      	ldrb	r3, [r4, #0]
 8003946:	2b2e      	cmp	r3, #46	@ 0x2e
 8003948:	d10a      	bne.n	8003960 <_svfiprintf_r+0x130>
 800394a:	7863      	ldrb	r3, [r4, #1]
 800394c:	2b2a      	cmp	r3, #42	@ 0x2a
 800394e:	d132      	bne.n	80039b6 <_svfiprintf_r+0x186>
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	9203      	str	r2, [sp, #12]
 8003958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800395c:	3402      	adds	r4, #2
 800395e:	9305      	str	r3, [sp, #20]
 8003960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a24 <_svfiprintf_r+0x1f4>
 8003964:	7821      	ldrb	r1, [r4, #0]
 8003966:	2203      	movs	r2, #3
 8003968:	4650      	mov	r0, sl
 800396a:	f7fc fc41 	bl	80001f0 <memchr>
 800396e:	b138      	cbz	r0, 8003980 <_svfiprintf_r+0x150>
 8003970:	9b04      	ldr	r3, [sp, #16]
 8003972:	eba0 000a 	sub.w	r0, r0, sl
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	4082      	lsls	r2, r0
 800397a:	4313      	orrs	r3, r2
 800397c:	3401      	adds	r4, #1
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003984:	4824      	ldr	r0, [pc, #144]	@ (8003a18 <_svfiprintf_r+0x1e8>)
 8003986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800398a:	2206      	movs	r2, #6
 800398c:	f7fc fc30 	bl	80001f0 <memchr>
 8003990:	2800      	cmp	r0, #0
 8003992:	d036      	beq.n	8003a02 <_svfiprintf_r+0x1d2>
 8003994:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <_svfiprintf_r+0x1ec>)
 8003996:	bb1b      	cbnz	r3, 80039e0 <_svfiprintf_r+0x1b0>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	3307      	adds	r3, #7
 800399c:	f023 0307 	bic.w	r3, r3, #7
 80039a0:	3308      	adds	r3, #8
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039a6:	4433      	add	r3, r6
 80039a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039aa:	e76a      	b.n	8003882 <_svfiprintf_r+0x52>
 80039ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80039b0:	460c      	mov	r4, r1
 80039b2:	2001      	movs	r0, #1
 80039b4:	e7a8      	b.n	8003908 <_svfiprintf_r+0xd8>
 80039b6:	2300      	movs	r3, #0
 80039b8:	3401      	adds	r4, #1
 80039ba:	9305      	str	r3, [sp, #20]
 80039bc:	4619      	mov	r1, r3
 80039be:	f04f 0c0a 	mov.w	ip, #10
 80039c2:	4620      	mov	r0, r4
 80039c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c8:	3a30      	subs	r2, #48	@ 0x30
 80039ca:	2a09      	cmp	r2, #9
 80039cc:	d903      	bls.n	80039d6 <_svfiprintf_r+0x1a6>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0c6      	beq.n	8003960 <_svfiprintf_r+0x130>
 80039d2:	9105      	str	r1, [sp, #20]
 80039d4:	e7c4      	b.n	8003960 <_svfiprintf_r+0x130>
 80039d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039da:	4604      	mov	r4, r0
 80039dc:	2301      	movs	r3, #1
 80039de:	e7f0      	b.n	80039c2 <_svfiprintf_r+0x192>
 80039e0:	ab03      	add	r3, sp, #12
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	462a      	mov	r2, r5
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <_svfiprintf_r+0x1f0>)
 80039e8:	a904      	add	r1, sp, #16
 80039ea:	4638      	mov	r0, r7
 80039ec:	f3af 8000 	nop.w
 80039f0:	1c42      	adds	r2, r0, #1
 80039f2:	4606      	mov	r6, r0
 80039f4:	d1d6      	bne.n	80039a4 <_svfiprintf_r+0x174>
 80039f6:	89ab      	ldrh	r3, [r5, #12]
 80039f8:	065b      	lsls	r3, r3, #25
 80039fa:	f53f af2d 	bmi.w	8003858 <_svfiprintf_r+0x28>
 80039fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a00:	e72c      	b.n	800385c <_svfiprintf_r+0x2c>
 8003a02:	ab03      	add	r3, sp, #12
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	462a      	mov	r2, r5
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <_svfiprintf_r+0x1f0>)
 8003a0a:	a904      	add	r1, sp, #16
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f000 f879 	bl	8003b04 <_printf_i>
 8003a12:	e7ed      	b.n	80039f0 <_svfiprintf_r+0x1c0>
 8003a14:	08003ed0 	.word	0x08003ed0
 8003a18:	08003eda 	.word	0x08003eda
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	08003779 	.word	0x08003779
 8003a24:	08003ed6 	.word	0x08003ed6

08003a28 <_printf_common>:
 8003a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	4698      	mov	r8, r3
 8003a30:	688a      	ldr	r2, [r1, #8]
 8003a32:	690b      	ldr	r3, [r1, #16]
 8003a34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	bfb8      	it	lt
 8003a3c:	4613      	movlt	r3, r2
 8003a3e:	6033      	str	r3, [r6, #0]
 8003a40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a44:	4607      	mov	r7, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	b10a      	cbz	r2, 8003a4e <_printf_common+0x26>
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	0699      	lsls	r1, r3, #26
 8003a52:	bf42      	ittt	mi
 8003a54:	6833      	ldrmi	r3, [r6, #0]
 8003a56:	3302      	addmi	r3, #2
 8003a58:	6033      	strmi	r3, [r6, #0]
 8003a5a:	6825      	ldr	r5, [r4, #0]
 8003a5c:	f015 0506 	ands.w	r5, r5, #6
 8003a60:	d106      	bne.n	8003a70 <_printf_common+0x48>
 8003a62:	f104 0a19 	add.w	sl, r4, #25
 8003a66:	68e3      	ldr	r3, [r4, #12]
 8003a68:	6832      	ldr	r2, [r6, #0]
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	42ab      	cmp	r3, r5
 8003a6e:	dc26      	bgt.n	8003abe <_printf_common+0x96>
 8003a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	3b00      	subs	r3, #0
 8003a78:	bf18      	it	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	0692      	lsls	r2, r2, #26
 8003a7e:	d42b      	bmi.n	8003ad8 <_printf_common+0xb0>
 8003a80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a84:	4641      	mov	r1, r8
 8003a86:	4638      	mov	r0, r7
 8003a88:	47c8      	blx	r9
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d01e      	beq.n	8003acc <_printf_common+0xa4>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	6922      	ldr	r2, [r4, #16]
 8003a92:	f003 0306 	and.w	r3, r3, #6
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	bf02      	ittt	eq
 8003a9a:	68e5      	ldreq	r5, [r4, #12]
 8003a9c:	6833      	ldreq	r3, [r6, #0]
 8003a9e:	1aed      	subeq	r5, r5, r3
 8003aa0:	68a3      	ldr	r3, [r4, #8]
 8003aa2:	bf0c      	ite	eq
 8003aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aa8:	2500      	movne	r5, #0
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	bfc4      	itt	gt
 8003aae:	1a9b      	subgt	r3, r3, r2
 8003ab0:	18ed      	addgt	r5, r5, r3
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	341a      	adds	r4, #26
 8003ab6:	42b5      	cmp	r5, r6
 8003ab8:	d11a      	bne.n	8003af0 <_printf_common+0xc8>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e008      	b.n	8003ad0 <_printf_common+0xa8>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4652      	mov	r2, sl
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	47c8      	blx	r9
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_printf_common+0xac>
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7c6      	b.n	8003a66 <_printf_common+0x3e>
 8003ad8:	18e1      	adds	r1, r4, r3
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	2030      	movs	r0, #48	@ 0x30
 8003ade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ae2:	4422      	add	r2, r4
 8003ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003aec:	3302      	adds	r3, #2
 8003aee:	e7c7      	b.n	8003a80 <_printf_common+0x58>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4622      	mov	r2, r4
 8003af4:	4641      	mov	r1, r8
 8003af6:	4638      	mov	r0, r7
 8003af8:	47c8      	blx	r9
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0e6      	beq.n	8003acc <_printf_common+0xa4>
 8003afe:	3601      	adds	r6, #1
 8003b00:	e7d9      	b.n	8003ab6 <_printf_common+0x8e>
	...

08003b04 <_printf_i>:
 8003b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	7e0f      	ldrb	r7, [r1, #24]
 8003b0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b0c:	2f78      	cmp	r7, #120	@ 0x78
 8003b0e:	4691      	mov	r9, r2
 8003b10:	4680      	mov	r8, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	469a      	mov	sl, r3
 8003b16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b1a:	d807      	bhi.n	8003b2c <_printf_i+0x28>
 8003b1c:	2f62      	cmp	r7, #98	@ 0x62
 8003b1e:	d80a      	bhi.n	8003b36 <_printf_i+0x32>
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	f000 80d2 	beq.w	8003cca <_printf_i+0x1c6>
 8003b26:	2f58      	cmp	r7, #88	@ 0x58
 8003b28:	f000 80b9 	beq.w	8003c9e <_printf_i+0x19a>
 8003b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b34:	e03a      	b.n	8003bac <_printf_i+0xa8>
 8003b36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b3a:	2b15      	cmp	r3, #21
 8003b3c:	d8f6      	bhi.n	8003b2c <_printf_i+0x28>
 8003b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8003b44 <_printf_i+0x40>)
 8003b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003b2d 	.word	0x08003b2d
 8003b50:	08003b2d 	.word	0x08003b2d
 8003b54:	08003b2d 	.word	0x08003b2d
 8003b58:	08003b2d 	.word	0x08003b2d
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003b2d 	.word	0x08003b2d
 8003b64:	08003b2d 	.word	0x08003b2d
 8003b68:	08003b2d 	.word	0x08003b2d
 8003b6c:	08003b2d 	.word	0x08003b2d
 8003b70:	08003cb1 	.word	0x08003cb1
 8003b74:	08003bdb 	.word	0x08003bdb
 8003b78:	08003c6b 	.word	0x08003c6b
 8003b7c:	08003b2d 	.word	0x08003b2d
 8003b80:	08003b2d 	.word	0x08003b2d
 8003b84:	08003cd3 	.word	0x08003cd3
 8003b88:	08003b2d 	.word	0x08003b2d
 8003b8c:	08003bdb 	.word	0x08003bdb
 8003b90:	08003b2d 	.word	0x08003b2d
 8003b94:	08003b2d 	.word	0x08003b2d
 8003b98:	08003c73 	.word	0x08003c73
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6032      	str	r2, [r6, #0]
 8003ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bac:	2301      	movs	r3, #1
 8003bae:	e09d      	b.n	8003cec <_printf_i+0x1e8>
 8003bb0:	6833      	ldr	r3, [r6, #0]
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	1d19      	adds	r1, r3, #4
 8003bb6:	6031      	str	r1, [r6, #0]
 8003bb8:	0606      	lsls	r6, r0, #24
 8003bba:	d501      	bpl.n	8003bc0 <_printf_i+0xbc>
 8003bbc:	681d      	ldr	r5, [r3, #0]
 8003bbe:	e003      	b.n	8003bc8 <_printf_i+0xc4>
 8003bc0:	0645      	lsls	r5, r0, #25
 8003bc2:	d5fb      	bpl.n	8003bbc <_printf_i+0xb8>
 8003bc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	da03      	bge.n	8003bd4 <_printf_i+0xd0>
 8003bcc:	232d      	movs	r3, #45	@ 0x2d
 8003bce:	426d      	negs	r5, r5
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bd4:	4859      	ldr	r0, [pc, #356]	@ (8003d3c <_printf_i+0x238>)
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	e011      	b.n	8003bfe <_printf_i+0xfa>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	6833      	ldr	r3, [r6, #0]
 8003bde:	0608      	lsls	r0, r1, #24
 8003be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003be4:	d402      	bmi.n	8003bec <_printf_i+0xe8>
 8003be6:	0649      	lsls	r1, r1, #25
 8003be8:	bf48      	it	mi
 8003bea:	b2ad      	uxthmi	r5, r5
 8003bec:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bee:	4853      	ldr	r0, [pc, #332]	@ (8003d3c <_printf_i+0x238>)
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	bf14      	ite	ne
 8003bf4:	230a      	movne	r3, #10
 8003bf6:	2308      	moveq	r3, #8
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bfe:	6866      	ldr	r6, [r4, #4]
 8003c00:	60a6      	str	r6, [r4, #8]
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	bfa2      	ittt	ge
 8003c06:	6821      	ldrge	r1, [r4, #0]
 8003c08:	f021 0104 	bicge.w	r1, r1, #4
 8003c0c:	6021      	strge	r1, [r4, #0]
 8003c0e:	b90d      	cbnz	r5, 8003c14 <_printf_i+0x110>
 8003c10:	2e00      	cmp	r6, #0
 8003c12:	d04b      	beq.n	8003cac <_printf_i+0x1a8>
 8003c14:	4616      	mov	r6, r2
 8003c16:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c1a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c1e:	5dc7      	ldrb	r7, [r0, r7]
 8003c20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c24:	462f      	mov	r7, r5
 8003c26:	42bb      	cmp	r3, r7
 8003c28:	460d      	mov	r5, r1
 8003c2a:	d9f4      	bls.n	8003c16 <_printf_i+0x112>
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d10b      	bne.n	8003c48 <_printf_i+0x144>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	07df      	lsls	r7, r3, #31
 8003c34:	d508      	bpl.n	8003c48 <_printf_i+0x144>
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	6861      	ldr	r1, [r4, #4]
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	bfde      	ittt	le
 8003c3e:	2330      	movle	r3, #48	@ 0x30
 8003c40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c48:	1b92      	subs	r2, r2, r6
 8003c4a:	6122      	str	r2, [r4, #16]
 8003c4c:	f8cd a000 	str.w	sl, [sp]
 8003c50:	464b      	mov	r3, r9
 8003c52:	aa03      	add	r2, sp, #12
 8003c54:	4621      	mov	r1, r4
 8003c56:	4640      	mov	r0, r8
 8003c58:	f7ff fee6 	bl	8003a28 <_printf_common>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d14a      	bne.n	8003cf6 <_printf_i+0x1f2>
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	b004      	add	sp, #16
 8003c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	f043 0320 	orr.w	r3, r3, #32
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	4833      	ldr	r0, [pc, #204]	@ (8003d40 <_printf_i+0x23c>)
 8003c74:	2778      	movs	r7, #120	@ 0x78
 8003c76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	6831      	ldr	r1, [r6, #0]
 8003c7e:	061f      	lsls	r7, r3, #24
 8003c80:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c84:	d402      	bmi.n	8003c8c <_printf_i+0x188>
 8003c86:	065f      	lsls	r7, r3, #25
 8003c88:	bf48      	it	mi
 8003c8a:	b2ad      	uxthmi	r5, r5
 8003c8c:	6031      	str	r1, [r6, #0]
 8003c8e:	07d9      	lsls	r1, r3, #31
 8003c90:	bf44      	itt	mi
 8003c92:	f043 0320 	orrmi.w	r3, r3, #32
 8003c96:	6023      	strmi	r3, [r4, #0]
 8003c98:	b11d      	cbz	r5, 8003ca2 <_printf_i+0x19e>
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	e7ac      	b.n	8003bf8 <_printf_i+0xf4>
 8003c9e:	4827      	ldr	r0, [pc, #156]	@ (8003d3c <_printf_i+0x238>)
 8003ca0:	e7e9      	b.n	8003c76 <_printf_i+0x172>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f023 0320 	bic.w	r3, r3, #32
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	e7f6      	b.n	8003c9a <_printf_i+0x196>
 8003cac:	4616      	mov	r6, r2
 8003cae:	e7bd      	b.n	8003c2c <_printf_i+0x128>
 8003cb0:	6833      	ldr	r3, [r6, #0]
 8003cb2:	6825      	ldr	r5, [r4, #0]
 8003cb4:	6961      	ldr	r1, [r4, #20]
 8003cb6:	1d18      	adds	r0, r3, #4
 8003cb8:	6030      	str	r0, [r6, #0]
 8003cba:	062e      	lsls	r6, r5, #24
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_i+0x1c0>
 8003cc0:	6019      	str	r1, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <_printf_i+0x1c6>
 8003cc4:	0668      	lsls	r0, r5, #25
 8003cc6:	d5fb      	bpl.n	8003cc0 <_printf_i+0x1bc>
 8003cc8:	8019      	strh	r1, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	4616      	mov	r6, r2
 8003cd0:	e7bc      	b.n	8003c4c <_printf_i+0x148>
 8003cd2:	6833      	ldr	r3, [r6, #0]
 8003cd4:	1d1a      	adds	r2, r3, #4
 8003cd6:	6032      	str	r2, [r6, #0]
 8003cd8:	681e      	ldr	r6, [r3, #0]
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7fc fa86 	bl	80001f0 <memchr>
 8003ce4:	b108      	cbz	r0, 8003cea <_printf_i+0x1e6>
 8003ce6:	1b80      	subs	r0, r0, r6
 8003ce8:	6060      	str	r0, [r4, #4]
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cf4:	e7aa      	b.n	8003c4c <_printf_i+0x148>
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	47d0      	blx	sl
 8003d00:	3001      	adds	r0, #1
 8003d02:	d0ad      	beq.n	8003c60 <_printf_i+0x15c>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	079b      	lsls	r3, r3, #30
 8003d08:	d413      	bmi.n	8003d32 <_printf_i+0x22e>
 8003d0a:	68e0      	ldr	r0, [r4, #12]
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	4298      	cmp	r0, r3
 8003d10:	bfb8      	it	lt
 8003d12:	4618      	movlt	r0, r3
 8003d14:	e7a6      	b.n	8003c64 <_printf_i+0x160>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	47d0      	blx	sl
 8003d20:	3001      	adds	r0, #1
 8003d22:	d09d      	beq.n	8003c60 <_printf_i+0x15c>
 8003d24:	3501      	adds	r5, #1
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	9903      	ldr	r1, [sp, #12]
 8003d2a:	1a5b      	subs	r3, r3, r1
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dcf2      	bgt.n	8003d16 <_printf_i+0x212>
 8003d30:	e7eb      	b.n	8003d0a <_printf_i+0x206>
 8003d32:	2500      	movs	r5, #0
 8003d34:	f104 0619 	add.w	r6, r4, #25
 8003d38:	e7f5      	b.n	8003d26 <_printf_i+0x222>
 8003d3a:	bf00      	nop
 8003d3c:	08003ee1 	.word	0x08003ee1
 8003d40:	08003ef2 	.word	0x08003ef2

08003d44 <memmove>:
 8003d44:	4288      	cmp	r0, r1
 8003d46:	b510      	push	{r4, lr}
 8003d48:	eb01 0402 	add.w	r4, r1, r2
 8003d4c:	d902      	bls.n	8003d54 <memmove+0x10>
 8003d4e:	4284      	cmp	r4, r0
 8003d50:	4623      	mov	r3, r4
 8003d52:	d807      	bhi.n	8003d64 <memmove+0x20>
 8003d54:	1e43      	subs	r3, r0, #1
 8003d56:	42a1      	cmp	r1, r4
 8003d58:	d008      	beq.n	8003d6c <memmove+0x28>
 8003d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d62:	e7f8      	b.n	8003d56 <memmove+0x12>
 8003d64:	4402      	add	r2, r0
 8003d66:	4601      	mov	r1, r0
 8003d68:	428a      	cmp	r2, r1
 8003d6a:	d100      	bne.n	8003d6e <memmove+0x2a>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d76:	e7f7      	b.n	8003d68 <memmove+0x24>

08003d78 <_sbrk_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d06      	ldr	r5, [pc, #24]	@ (8003d94 <_sbrk_r+0x1c>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	f7fc fffe 	bl	8000d84 <_sbrk>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_sbrk_r+0x1a>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_sbrk_r+0x1a>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	2000039c 	.word	0x2000039c

08003d98 <memcpy>:
 8003d98:	440a      	add	r2, r1
 8003d9a:	4291      	cmp	r1, r2
 8003d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003da0:	d100      	bne.n	8003da4 <memcpy+0xc>
 8003da2:	4770      	bx	lr
 8003da4:	b510      	push	{r4, lr}
 8003da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dae:	4291      	cmp	r1, r2
 8003db0:	d1f9      	bne.n	8003da6 <memcpy+0xe>
 8003db2:	bd10      	pop	{r4, pc}

08003db4 <_realloc_r>:
 8003db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db8:	4680      	mov	r8, r0
 8003dba:	4615      	mov	r5, r2
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	b921      	cbnz	r1, 8003dca <_realloc_r+0x16>
 8003dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	f7ff bc4b 	b.w	8003660 <_malloc_r>
 8003dca:	b92a      	cbnz	r2, 8003dd8 <_realloc_r+0x24>
 8003dcc:	f7ff fbdc 	bl	8003588 <_free_r>
 8003dd0:	2400      	movs	r4, #0
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd8:	f000 f81a 	bl	8003e10 <_malloc_usable_size_r>
 8003ddc:	4285      	cmp	r5, r0
 8003dde:	4606      	mov	r6, r0
 8003de0:	d802      	bhi.n	8003de8 <_realloc_r+0x34>
 8003de2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003de6:	d8f4      	bhi.n	8003dd2 <_realloc_r+0x1e>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4640      	mov	r0, r8
 8003dec:	f7ff fc38 	bl	8003660 <_malloc_r>
 8003df0:	4607      	mov	r7, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0ec      	beq.n	8003dd0 <_realloc_r+0x1c>
 8003df6:	42b5      	cmp	r5, r6
 8003df8:	462a      	mov	r2, r5
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	bf28      	it	cs
 8003dfe:	4632      	movcs	r2, r6
 8003e00:	f7ff ffca 	bl	8003d98 <memcpy>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f7ff fbbe 	bl	8003588 <_free_r>
 8003e0c:	463c      	mov	r4, r7
 8003e0e:	e7e0      	b.n	8003dd2 <_realloc_r+0x1e>

08003e10 <_malloc_usable_size_r>:
 8003e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e14:	1f18      	subs	r0, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfbc      	itt	lt
 8003e1a:	580b      	ldrlt	r3, [r1, r0]
 8003e1c:	18c0      	addlt	r0, r0, r3
 8003e1e:	4770      	bx	lr

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
